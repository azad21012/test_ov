{"version":3,"sources":["OvVideo.js","UserVideoComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["OpenViduVideoComponent","props","videoRef","React","createRef","this","streamManager","addVideoElement","current","autoPlay","ref","Component","UserVideoComponent","JSON","parse","stream","connection","data","clientData","undefined","className","getNicknameTag","OPENVIDU_SERVER_URL","App","state","mySessionId","myUserName","Math","floor","random","session","mainStreamManager","publisher","subscribers","adminStream","token","joinSession","bind","leaveSession","handleChangeSessionId","handleChangeUserName","handleMainVideoStream","onbeforeunload","ov","console","log","user","toLowerCase","window","addEventListener","removeEventListener","event","e","setState","target","value","index","_","findIndex","o","connectionId","splice","OV","OpenVidu","initSession","mySession","on","subscriber","subscribe","checkAdminStream","sub","subs","push","deleteSubscriber","getToken","then","connect","initPublisher","audioSource","videoSource","publishAudio","publishVideo","resolution","frameRate","insertMode","mirror","publish","catch","error","code","message","disconnect","id","src","alt","onSubmit","type","onChange","required","name","onClick","length","createSession","sessionId","createToken","Promise","resolve","reject","stringify","customSessionId","axios","post","headers","Authorization","btoa","response","Object","assign","status","warn","confirm","location","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","fetch","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6c846d3d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class OpenViduVideoComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.videoRef = React.createRef();\n    }\n\n    componentDidUpdate(props) {\n        if (props && !!this.videoRef) {\n            this.props.streamManager.addVideoElement(this.videoRef.current);\n        }\n    }\n\n    componentDidMount() {\n        if (this.props && !!this.videoRef) {\n            this.props.streamManager.addVideoElement(this.videoRef.current);\n        }\n    }\n\n    render() {\n        return <video autoPlay={true} ref={this.videoRef} />;\n    }\n\n}\n","import React, { Component } from 'react';\nimport OpenViduVideoComponent from './OvVideo';\nimport './UserVideo.css';\n\nexport default class UserVideoComponent extends Component {\n\n    getNicknameTag() {\n        // Gets the nickName of the user\n        return JSON.parse(this.props.streamManager.stream.connection.data).clientData;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.streamManager !== undefined ? (\n                    <div className=\"streamcomponent\">\n                        <OpenViduVideoComponent streamManager={this.props.streamManager} />\n                        <div><p>{this.getNicknameTag()}</p></div>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n","import axios from \"axios\";\nimport { OpenVidu } from \"openvidu-browser\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport UserVideoComponent from \"./UserVideoComponent\";\nimport _ from \"lodash\";\n\nconst OPENVIDU_SERVER_URL = \"https://ok-vhxcrdgqszi5gghu3snu.atlms.ir\";\nconst OPENVIDU_SERVER_SECRET = \"kJmYENudQ1zAsIZ\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mySessionId: \"SessionA\",\n      myUserName: \"Participant\" + Math.floor(Math.random() * 100),\n      session: undefined,\n      mainStreamManager: undefined,\n      publisher: undefined,\n      subscribers: [],\n      adminStream: undefined,\n      token: undefined,\n    };\n\n    this.joinSession = this.joinSession.bind(this);\n    this.leaveSession = this.leaveSession.bind(this);\n    this.handleChangeSessionId = this.handleChangeSessionId.bind(this);\n    this.handleChangeUserName = this.handleChangeUserName.bind(this);\n    this.handleMainVideoStream = this.handleMainVideoStream.bind(this);\n    this.onbeforeunload = this.onbeforeunload.bind(this);\n  }\n\n  getNicknameTag(ov) {\n    console.log(\"adminov\", ov);\n    return JSON.parse(ov.stream.connection.data).clientData;\n  }\n\n  checkAdminStream(user) {\n    if (this.getNicknameTag(user).toLowerCase() === \"admin\") {\n      return user;\n    } else {\n      return undefined;\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"beforeunload\", this.onbeforeunload);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"beforeunload\", this.onbeforeunload);\n  }\n\n  onbeforeunload(event) {\n    this.leaveSession();\n  }\n\n  handleChangeSessionId(e) {\n    this.setState({\n      mySessionId: e.target.value,\n    });\n  }\n\n  handleChangeUserName(e) {\n    this.setState({\n      myUserName: e.target.value,\n    });\n  }\n\n  handleMainVideoStream(stream) {\n    if (this.state.mainStreamManager !== stream) {\n      this.setState({\n        mainStreamManager: stream,\n      });\n    }\n  }\n\n  deleteSubscriber(streamManager) {\n    let subscribers = this.state.subscribers;\n    let index = _.findIndex(subscribers, function(o) { return o.connection.connectionId == streamManager.connection.connectionId; });\n    if (index > -1) {\n      subscribers.splice(index, 1);\n      this.setState({\n        subscribers: subscribers,\n      });\n    }\n  }\n\n  joinSession() {\n    // --- 1) Get an OpenVidu object ---\n\n    this.OV = new OpenVidu();\n\n    // --- 2) Init a session ---\n\n    this.setState(\n      {\n        session: this.OV.initSession(),\n      },\n      () => {\n        var mySession = this.state.session;\n\n        // --- 3) Specify the actions when events take place in the session ---\n\n        // On every new Stream received...\n        mySession.on(\"streamCreated\", (event) => {\n          // Subscribe to the Stream to receive it. Second parameter is undefined\n          // so OpenVidu doesn't create an HTML video by its own\n          var subscriber = mySession.subscribe(event.stream, undefined);\n          // var subscribers = this.state.subscribers;\n          // subscribers.push(subscriber);\n\n          // Update the state with the new subscribers\n          // this.setState({\n          //   subscribers: subscribers,\n          // });\n          if (!!this.checkAdminStream(subscriber)) {\n            this.setState({\n              adminStream: this.checkAdminStream(subscriber),\n            });\n          }\n        });\n\n        // On every new Stream received...\n        mySession.on(\"connectionCreated\", (event) => {\n          console.log(\"connectionCreatedaa\")\n          var sub = event;\n          var subs = this.state.subscribers;\n          subs.push(sub);\n\n          // Update the state with the new subscribers\n          this.setState({\n            subscribers: subs,\n          });\n        });\n\n        // On every Stream destroyed...\n        mySession.on(\"connectionDestroyed\", (event) => {\n          // Remove the stream from 'subscribers' array\n          this.deleteSubscriber(event);\n        });\n\n        // --- 4) Connect to the session with a valid user token ---\n\n        // 'getToken' method is simulating what your server-side should do.\n        // 'token' parameter should be retrieved and returned by your own backend\n        this.getToken().then((token) => {\n          // First param is the token got from OpenVidu Server. Second param can be retrieved by every user on event\n          // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\n          mySession\n            .connect(token, { clientData: this.state.myUserName })\n            .then(() => {\n              // --- 5) Get your own camera stream ---\n\n              // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\n              // element: we will manage it on our own) and with the desired properties\n              let publisher = this.OV.initPublisher(undefined, {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true, // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true, // Whether you want to start publishing with your video enabled or not\n                resolution: \"640x480\", // The resolution of your video\n                frameRate: 30, // The frame rate of your video\n                insertMode: \"APPEND\", // How the video is inserted in the target element 'video-container'\n                mirror: false, // Whether to mirror your local video or not\n              });\n\n              // --- 6) Publish your stream ---\n\n              mySession.publish(publisher);\n\n              // Set the main video in the page to display our webcam and store our Publisher\n              this.setState({\n                publisher: publisher,\n                token,\n              });\n\n              if (!!this.checkAdminStream(publisher)) {\n                this.setState({\n                  adminStream: publisher,\n                });\n              }\n            })\n            .catch((error) => {\n              console.log(\n                \"There was an error connecting to the session:\",\n                error.code,\n                error.message\n              );\n            });\n        });\n      }\n    );\n  }\n\n  leaveSession() {\n    // --- 7) Leave the session by calling 'disconnect' method over the Session object ---\n\n    const mySession = this.state.session;\n\n    if (mySession) {\n      mySession.disconnect();\n    }\n\n    // Empty all properties...\n    this.OV = null;\n    this.setState({\n      session: undefined,\n      subscribers: [],\n      mySessionId: \"SessionA\",\n      myUserName: \"Participant\" + Math.floor(Math.random() * 100),\n      mainStreamManager: undefined,\n      publisher: undefined,\n    });\n  }\n\n  render() {\n    const mySessionId = this.state.mySessionId;\n    const myUserName = this.state.myUserName;\n\n    return (\n      <div className=\"container\">\n        {this.state.session === undefined ? (\n          <div id=\"join\">\n            <div id=\"img-div\">\n              <img\n                src=\"resources/images/openvidu_grey_bg_transp_cropped.png\"\n                alt=\"OpenVidu logo\"\n              />\n            </div>\n            <div id=\"join-dialog\" className=\"jumbotron vertical-center\">\n              <h1> Join a video session </h1>\n              <form className=\"form-group\" onSubmit={this.joinSession}>\n                <p>\n                  <label>Participant: </label>\n                  <input\n                    className=\"form-control\"\n                    type=\"text\"\n                    id=\"userName\"\n                    value={myUserName}\n                    onChange={this.handleChangeUserName}\n                    required\n                  />\n                </p>\n                <p>\n                  <label> Session: </label>\n                  <input\n                    className=\"form-control\"\n                    type=\"text\"\n                    id=\"sessionId\"\n                    value={mySessionId}\n                    onChange={this.handleChangeSessionId}\n                    required\n                  />\n                </p>\n                <p className=\"text-center\">\n                  <input\n                    className=\"btn btn-lg btn-success\"\n                    name=\"commit\"\n                    type=\"submit\"\n                    value=\"JOIN\"\n                  />\n                </p>\n              </form>\n            </div>\n          </div>\n        ) : null}\n\n        {this.state.session !== undefined ? (\n          <div id=\"session\">\n            <div id=\"session-header\">\n              <h1 id=\"session-title\">{mySessionId}</h1>\n              {this.state.token && <div>Your token:{this.state.token}</div>}\n              <input\n                className=\"btn btn-large btn-danger\"\n                type=\"button\"\n                id=\"buttonLeaveSession\"\n                onClick={this.leaveSession}\n                value=\"Leave session\"\n              />\n            </div>\n\n            {this.state.adminStream !== undefined ? (\n              <div id=\"main-video\" className=\"col-md-10\">\n                <UserVideoComponent streamManager={this.state.adminStream} />\n              </div>\n            ) : null}\n            <div id=\"video-container\" className=\"col-md-2\">\n              <h4>Remote Users</h4>\n              <div>Counts: {this.state.subscribers.length}</div>\n              {/* {this.state.publisher !== undefined ? (\n                                <div className=\"stream-container col-md-6 col-xs-6\" onClick={() => this.handleMainVideoStream(this.state.publisher)}>\n                                    <UserVideoComponent\n                                        streamManager={this.state.publisher} />\n                                </div>\n                            ) : null}\n                            {this.state.subscribers.map((sub, i) => (\n                                <div key={i} className=\"stream-container col-md-6 col-xs-6\" onClick={() => this.handleMainVideoStream(sub)}>\n                                    <UserVideoComponent streamManager={sub} />\n                                </div>\n                            ))} */}\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  /**\n   * --------------------------\n   * SERVER-SIDE RESPONSIBILITY\n   * --------------------------\n   * These methods retrieve the mandatory user token from OpenVidu Server.\n   * This behavior MUST BE IN YOUR SERVER-SIDE IN PRODUCTION (by using\n   * the API REST, openvidu-java-client or openvidu-node-client):\n   *   1) Initialize a Session in OpenVidu Server\t(POST /openvidu/api/sessions)\n   *   2) Create a Connection in OpenVidu Server (POST /openvidu/api/sessions/<SESSION_ID>/connection)\n   *   3) The Connection.token must be consumed in Session.connect() method\n   */\n\n  getToken() {\n    return this.createSession(this.state.mySessionId).then((sessionId) =>\n      this.createToken(sessionId)\n    );\n  }\n\n  createSession(sessionId) {\n    return new Promise((resolve, reject) => {\n      var data = JSON.stringify({ customSessionId: sessionId });\n      axios\n        .post(OPENVIDU_SERVER_URL + \"/openvidu/api/sessions\", data, {\n          headers: {\n            Authorization:\n              \"Basic \" + btoa(\"OPENVIDUAPP:\" + OPENVIDU_SERVER_SECRET),\n            \"Content-Type\": \"application/json\",\n          },\n        })\n        .then((response) => {\n          console.log(\"CREATE SESION\", response);\n          resolve(response.data.id);\n        })\n        .catch((response) => {\n          var error = Object.assign({}, response);\n          if (error.response.status === 409) {\n            resolve(sessionId);\n          } else {\n            console.log(error);\n            console.warn(\n              \"No connection to OpenVidu Server. This may be a certificate error at \" +\n                OPENVIDU_SERVER_URL\n            );\n            if (\n              window.confirm(\n                'No connection to OpenVidu Server. This may be a certificate error at \"' +\n                  OPENVIDU_SERVER_URL +\n                  '\"\\n\\nClick OK to navigate and accept it. ' +\n                  'If no certificate warning is shown, then check that your OpenVidu Server is up and running at \"' +\n                  OPENVIDU_SERVER_URL +\n                  '\"'\n              )\n            ) {\n              window.location.assign(\n                OPENVIDU_SERVER_URL + \"/accept-certificate\"\n              );\n            }\n          }\n        });\n    });\n  }\n\n  createToken(sessionId) {\n    return new Promise((resolve, reject) => {\n      var data = {};\n      axios\n        .post(\n          OPENVIDU_SERVER_URL +\n            \"/openvidu/api/sessions/\" +\n            sessionId +\n            \"/connection\",\n          data,\n          {\n            headers: {\n              Authorization:\n                \"Basic \" + btoa(\"OPENVIDUAPP:\" + OPENVIDU_SERVER_SECRET),\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        )\n        .then((response) => {\n          console.log(\"TOKEN\", response);\n          resolve(response.data.token);\n        })\n        .catch((error) => reject(error));\n    });\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}